---
- name: Installing of a new full environment
  hosts: localhost
  connection: local
  become: yes
  gather_facts: no
  tasks:
    - name: Setting timezone to UTC
      ansible.builtin.command:
        cmd: timedatectl set-timezone UTC

    - name: Restarting MySQL service
      service:
        name: mariadb
        state: restarted
      ignore_errors: yes

    - name: Creating array for deleting files
      set_fact:
        dell_files: "{{ delete_files.split(',') }}"
      no_log: true

    - name: Deleting files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ dell_files }}"

    - name: Creating array with urls
      set_fact:
        urls: "{{ download_bitrix_install_files_new_site.split(',') }}"
      no_log: true

    - name: Downloading Bitrix scripts
      get_url:
        url: "{{ item }}"
        dest: "{{ document_root }}"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"
        timeout: "{{ timeout_download_bitrix_install_files_new_site }}"
      ignore_errors: yes
      with_items: "{{ urls }}"

    - name: Creating of downloaded file names array
      set_fact:
        file_names_download: "{{ urls | map('basename') | list }}"
      no_log: true

    - name: Generating index.html using links of downloaded files
      template:
        dest: "{{ document_root }}/index.html"
        src: "/root/vm_menu/ansible/playbooks/roles/create_site/templates/site_full_tpl/index.j2"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"
      no_log: true

    - name: Creating directory bitrix/php_interface
      file:
        state: directory
        path: "{{ document_root }}/bitrix/php_interface"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_dirs }}"

    - name: Generating dbconn.php file
      template:
        dest: "{{ document_root }}/bitrix/php_interface/dbconn.php"
        src: "/root/vm_menu/ansible/playbooks/roles/create_site/templates/site_full_tpl/dbconn.j2"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"

    - name: Generating .settings.php file
      template:
        dest: "{{ document_root }}/bitrix/.settings.php"
        src: "/root/vm_menu/ansible/playbooks/roles/create_site/templates/site_full_tpl/.settings.j2"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"

    ############## SITE FILES ##############
    - name: Adding .htaccess file
      copy:
        src: "/root/vm_menu/ansible/playbooks/roles/create_site/files/site_files/.htaccess"
        dest: "{{ document_root }}"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"

    ############## NGINX ##############
    - name: Adding Nginx configuration file
      template:
        dest: "{{ path_nginx_sites_conf }}/default.conf"
        src: "/root/vm_menu/ansible/playbooks/roles/create_site/templates/nginx_conf/default.j2"

    - name: Creating symbol link (site_enable) for Nginx configuration file
      file:
        src: "{{ path_nginx_sites_conf }}/default.conf"
        dest: "{{ path_nginx_sites_enabled }}/default.conf"
        state: link

# Fix bug, dont start NGINX after reboot system
    - name: Ensuring 'Requires=apache2.service' is in [Unit]
      lineinfile:
        path: "/lib/systemd/system/{{ service_nginx_name }}.service"
        regexp: '^Requires='
        line: 'Requires=apache2.service'
        insertafter: '\[Unit\]'
        state: present

    - name: Ensuring 'After' contains 'apache2.service'
      block:
        - name: Check if 'After' exists
          command: grep '^After=' "/lib/systemd/system/{{ service_nginx_name }}.service"
          register: after_line
          ignore_errors: yes

        - name: "Adding 'After' line if doesn`t present"
          lineinfile:
            path: "/lib/systemd/system/{{ service_nginx_name }}.service"
            line: 'After=apache2.service'
          when: after_line.rc != 0

        - name: Ensuring 'After' contains 'apache2.service'
          lineinfile:
            path: "/lib/systemd/system/{{ service_nginx_name }}.service"
            regexp: '^After='
            line: "{{ 'After=' + (after_line.stdout.split('=')[1] + ' apache2.service').split() | unique | join(' ') }}"
          when: after_line.rc == 0

    - name: Ensuring 'Restart=on-failure' is in [Service]
      lineinfile:
        path: "/lib/systemd/system/{{ service_nginx_name }}.service"
        regexp: '^Restart='
        line: 'Restart=on-failure'
        insertafter: '\[Service\]'
        state: present

    - name: Ensuring 'RestartSec=1s' is in [Service]
      lineinfile:
        path: "/lib/systemd/system/{{ service_nginx_name }}.service"
        regexp: '^RestartSec='
        line: 'RestartSec=1s'
        insertafter: '\[Service\]'
        state: present

    - name: Ensuring 'StartLimitIntervalSec=500' is in [Service]
      lineinfile:
        path: "/lib/systemd/system/{{ service_nginx_name }}.service"
        regexp: '^StartLimitIntervalSec='
        line: 'StartLimitIntervalSec=500'
        insertafter: '\[Service\]'
        state: present

    - name: Ensuring 'StartLimitBurst=50' is in [Service]
      lineinfile:
        path: "/lib/systemd/system/{{ service_nginx_name }}.service"
        regexp: '^StartLimitBurst='
        line: 'StartLimitBurst=50'
        insertafter: '\[Service\]'
        state: present

# END fix bug, dont start NGINX after reboot system

    - name: Restarting Nginx
      systemd:
        name: "{{ service_nginx_name }}"
        state: restarted


    ############## APACHE ##############
    - name: Adding Apache configuration file
      template:
        dest: "{{ path_apache_sites_conf }}/default.conf"
        src: "/root/vm_menu/ansible/playbooks/roles/create_site/templates/apache_conf/default.j2"

    - name: Creating symbol link (site_enable) for Apache configuration file
      file:
        src: "{{ path_apache_sites_conf }}/default.conf"
        dest: "{{ path_apache_sites_enabled }}/default.conf"
        state: link

    - name: Restarting Apache
      systemd:
        name: "{{ service_apache_name }}"
        state: restarted

    ############## Show IP address ##############
    - name: Creating script
      copy:
        dest: /usr/local/bin/display-ip.sh
        content: |
          #!/bin/bash
          source /root/vm_menu/bash_scripts/utils.sh
          get_ip_current_server
          echo -e "\n\n          ${CURRENT_SERVER_IP}\ndebian login:" > /dev/tty1

        mode: '0755'

    - name: Creating systemd service for IP showing
      copy:
        dest: /etc/systemd/system/display-ip@.service
        content: |
         [Unit]
         Description=Show IP address on tty%I
         After=network-online.target multi-user.target
         Wants=network-online.target multi-user.target

         [Service]
         ExecStart=/usr/local/bin/display-ip.sh
         StandardOutput=tty
         TTYPath=/dev/tty%I
         Type=simple

         [Install]
         WantedBy=getty.target
        mode: '0644'

    - name: Create directory for getty@.service override
      file:
        path: /etc/systemd/system/getty@tty1.service.d
        state: directory
        mode: '0755'

    - name: Override getty@.service to use display-ip.sh
      copy:
        dest: /etc/systemd/system/getty@tty1.service.d/override.conf
        content: |
         [Service]
         ExecStartPost=/usr/local/bin/display-ip.sh
        mode: '0644'

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Restart getty@tty1.service
      systemd:
        name: getty@tty1
        state: restarted

# Change site user for connection SSH
    - name: Installing of python3-passlib
      apt:
        name: python3-passlib
        state: present

    - name: Creating home directory for user {{ user_server_sites }}
      file:
        path: "/home/{{ user_server_sites }}"
        state: directory
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: '0755'

    - name: Creating directory .ssh
      file:
        path: "/home/{{ user_server_sites }}/.ssh"
        state: directory
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: '0700'

    - name: Generating SSH key
      command: ssh-keygen -t rsa -b 2048 -f "/home/{{ user_server_sites }}/.ssh/id_rsa" -N ''
      args:
        creates: "/home/{{ user_server_sites }}/.ssh/id_rsa"

    - name: Copying public key in authorized_keys
      copy:
        src: "/home/{{ user_server_sites }}/.ssh/id_rsa.pub"
        dest: "/home/{{ user_server_sites }}/.ssh/authorized_keys"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: '0600'

    - name: Change the rights to the directory
      file:
        path: "/home/{{ user_server_sites }}"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        recurse: yes

    - name: Change user {{ user_server_sites }} for connecting SSH
      lineinfile:
        path: /etc/passwd
        regexp: "^{{ user_server_sites }}:"
        line: "{{ user_server_sites }}:x:33:33:{{ group_user_server_sites }}:{{ path_sites }}:/bin/bash"
        state: present

    - name: Setting password from user {{ user_server_sites }}
      user:
        name: "{{ user_server_sites }}"
        password: "{{ site_user_password | password_hash('sha512', 'passlib') }}"
